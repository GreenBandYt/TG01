import asyncio
import requests
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from config import TOKEN, GBt_key
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.dispatcher.router import Router

bot = Bot(token=TOKEN)
dp = Dispatcher()
router = Router()
dp.include_router(router)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≥–æ—Ä–æ–¥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_cities = {}

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞
class SetCityState(StatesGroup):
    waiting_for_city = State()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ
def get_weather(city):
    url = f'https://api.openweathermap.org/data/2.5/weather?q={city}&appid={GBt_key}&units=metric&lang=ru'
    try:
        response = requests.get(url, timeout=20)
        if response.status_code == 200:
            data = response.json()
            city_name = data['name']
            temperature = data['main']['temp']
            feels_like = data['main']['feels_like']
            description = data['weather'][0]['description']
            wind_speed = data['wind']['speed']
            wind_speed_kmh = round(wind_speed * 3.6, 1)
            humidity = data['main']['humidity']
            pressure = data['main']['pressure']
            pressure_mmHg = round(pressure * 0.75006)
            sunrise = data['sys']['sunrise']
            sunset = data['sys']['sunset']

            from datetime import datetime
            sunrise_time = datetime.fromtimestamp(sunrise).strftime('%H:%M:%S')
            sunset_time = datetime.fromtimestamp(sunset).strftime('%H:%M:%S')

            return {
                "city_name": city_name,
                "temperature": temperature,
                "feels_like": feels_like,
                "description": description,
                "wind_speed": wind_speed,
                "wind_speed_kmh": wind_speed_kmh,
                "humidity": humidity,
                "pressure": pressure_mmHg,
                "sunrise": sunrise_time,
                "sunset": sunset_time
            }
        else:
            return f"–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –¥–ª—è {city} (–∫–æ–¥ {response.status_code})"
    except requests.exceptions.ReadTimeout:
        return "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    except requests.exceptions.RequestException as e:
        return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö: {e}"

# –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
inline_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="–ü–æ–≥–æ–¥–∞", callback_data="weather"), InlineKeyboardButton(text="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥–æ—Ä–æ–¥", callback_data="set_city")],
    
])

# –°–æ–∑–¥–∞–µ–º –Ω–∏–∂–Ω–µ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
reply_keyboard = ReplyKeyboardMarkup(
    resize_keyboard=True,
    keyboard=[
        [KeyboardButton(text="/start"), KeyboardButton(text="/help")]
    ]
)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ /start –∏ /help
@router.message(CommandStart())
async def start_command(message: Message):
    await message.answer(f"–î–æ–±—Ä–æ–≥–æ –¥–Ω—è, {message.from_user.full_name}! –•–æ—Ä–æ—à–µ–π –ø–æ–≥–æ–¥—ã! ‚òÄÔ∏è", reply_markup=inline_keyboard)

@router.message(Command('help'))
async def help_command(message: Message):
    await message.answer("–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                         "/start - –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
                         "/help - –ø–æ–º–æ—â—å\n"
                         "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è.", reply_markup=inline_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è callback-–∑–∞–ø—Ä–æ—Å–æ–≤
@router.callback_query()
async def handle_callback(callback_query: CallbackQuery, state: FSMContext):
    data = callback_query.data
    user_id = callback_query.from_user.id

    if data == 'start':
        await callback_query.message.answer(f"–î–æ–±—Ä–æ–≥–æ –¥–Ω—è, {callback_query.from_user.full_name}! –•–æ—Ä–æ—à–µ–π –ø–æ–≥–æ–¥—ã! ‚òÄÔ∏è", reply_markup=inline_keyboard)
    elif data == 'help':
        await callback_query.message.answer("–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                                            "/start - –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
                                            "/help - –ø–æ–º–æ—â—å\n"
                                            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è.", reply_markup=inline_keyboard)
    elif data == 'weather':
        city = user_cities.get(user_id, 'Smolensk')
        weather_data = get_weather(city)
        if isinstance(weather_data, dict):
            await callback_query.message.answer(f"üåÜ –ì–æ—Ä–æ–¥: {weather_data['city_name']}\n"
                                                f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {weather_data['temperature']}¬∞C\n"
                                                f"ü§ó –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {weather_data['feels_like']}¬∞C\n"
                                                f"‚òÅÔ∏è –ü–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è: {weather_data['description']}\n"
                                                f"üí® –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {weather_data['wind_speed']} –º/—Å ({weather_data['wind_speed_kmh']} –∫–º/—á)\n"
                                                f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {weather_data['humidity']}%\n"
                                                f"üîΩ –î–∞–≤–ª–µ–Ω–∏–µ: {weather_data['pressure']} –º–º —Ä—Ç. —Å—Ç.\n"
                                                f"üåÖ –í–æ—Å—Ö–æ–¥ —Å–æ–ª–Ω—Ü–∞: {weather_data['sunrise']}\n"
                                                f"üåá –ó–∞–∫–∞—Ç —Å–æ–ª–Ω—Ü–∞: {weather_data['sunset']}", reply_markup=inline_keyboard)
        else:
            await callback_query.message.answer(weather_data, reply_markup=inline_keyboard)
    elif data == 'set_city':
        await callback_query.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏:", reply_markup=inline_keyboard)
        await state.set_state(SetCityState.waiting_for_city)

    await callback_query.answer()

@router.message(SetCityState.waiting_for_city)
async def city_received(message: Message, state: FSMContext):
    city = message.text
    user_id = message.from_user.id
    user_cities[user_id] = city
    await message.answer(f"–ì–æ—Ä–æ–¥ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {city} üåç", reply_markup=inline_keyboard)
    await state.clear()

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
